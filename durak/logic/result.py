from aiogram import types
from aiogram.types import InlineQueryResultArticle, InlineQueryResult, \
                    InlineQueryResultCachedSticker as Sticker, \
                    InputTextMessageContent, InlineKeyboardButton, \
                    InlineKeyboardMarkup
from typing import List
from uuid import uuid4
from config import Commands

from objects import Player, Game, Card, card as c


def add_no_game(results: List[InlineQueryResult]):
    """Add text result if user is not playing"""
    results.append(
        InlineQueryResultArticle(
            id="nogame",
            title = "–í—ã –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ",
            input_message_content=
            InputTextMessageContent('–í—ã —Å–µ–π—á–∞—Å –Ω–µ –∏–≥—Ä–∞–µ—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new —á—Ç–æ–±—ã '
                                    '–Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –∏–ª–∏ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∏–≥—Ä–µ '
                                    '—Ç–µ–∫—É—â–∞—è –∏–≥—Ä–∞ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ')
        )
    )


def add_not_started(results: List[InlineQueryResult]):
    """Add text result if the game has not yet started"""
    results.append(
        InlineQueryResultArticle(
            id="nogame",
            title = "–ò–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å",
            input_message_content=
            InputTextMessageContent(f'–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É /{Commands.START}')
        )
    )


def add_draw(player: Player, results: List[InlineQueryResult]):
    """Add option to draw"""
    game = player.game
    n = len(game.attacking_cards)+len(game.defending_cards)

    results.append(
        Sticker(
            id="draw", sticker_file_id=c.STICKERS['draw'],
            input_message_content=
            # InputTextMessageContent(f'–í–∑—è–ª(–∞) {n} üÉè')
            InputTextMessageContent("–í–∑—è–ª(–∞) –∫–∞—Ä—Ç—ã!")
        )
    )


def add_gameinfo(game: Game, results: List[InlineQueryResult]):
    """Add option to show game info"""

    results.append(
        Sticker(
            id="gameinfo",
            sticker_file_id=c.STICKERS['info'],
            input_message_content=game_info(game)
        )
    )


def add_pass(results: List[InlineQueryResult], game: Game):
    """Add option to pass"""
    results.append(
        Sticker(
            id="pass", sticker_file_id=c.STICKERS['pass'],
            input_message_content=InputTextMessageContent(
                'Pass'
            )
        )
    )



def add_card(game: Game, atk_card: Card, results: List[InlineQueryResult], can_play: bool, def_card: Card = None):
    """Add an option that represents a card"""

    if can_play:
        id = repr(atk_card)

        if def_card:
            id += f'-{repr(def_card)}'

            results.append(
                Sticker(id=id, sticker_file_id=c.STICKERS['normal'][repr(def_card)],
                    input_message_content=InputTextMessageContent(
                        f"–ü–æ–±–∏–ª –∫–∞—Ä—Ç—É {str(atk_card)}, –∫–∞—Ä—Ç–æ–π {str(def_card)}"
                    )
                )
            )

        else:
            beat = [[InlineKeyboardButton(text='–ü–æ–±–∏—Ç—å —ç—Ç—É –∫–∞—Ä—Ç—É!', switch_inline_query_current_chat=f'{repr(atk_card)}')]]
            results.append(
                    Sticker(id=id, sticker_file_id=c.STICKERS['normal'][repr(atk_card)],
                        input_message_content=InputTextMessageContent(
                            f"–ö–∏–Ω—É–ª –∫–∞—Ä—Ç—É: {str(atk_card)}"
                        ),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=beat)
                    )
                )
    
    else:
        results.append(
            Sticker(id=str(uuid4()), sticker_file_id=c.STICKERS['grey'][repr(def_card or atk_card)],
                    input_message_content=game_info(game))
        )


def game_info(game: Game):
    players = game.players
    field = game.field
    trump = game.trump
    count_cards_in_deck = len(game.deck.cards)

    pleyers_info = ''.join(f"\n‚Ä¢ {len(pl.cards)} üÉè | {pl.user.get_mention(as_html=True)}" for pl in players)
    
    field_info = ''.join(f'\n  {str(a)} ‚óÑ-- {str(d) if not d is None else "‚ùå"}' for a, d in field.items())

    return InputTextMessageContent(
        f"–ê—Ç–∞–∫—É—é—â–∏–π: {game.current_player.user.get_mention(as_html=True)}\n"
        f"–û—Ç–±–∏–≤–∞—é—â–∏–π: {game.opponent_player.user.get_mention(as_html=True)}\n\n"
        f"–ö–æ–∑—ã—Ä—å: {game.deck.trump_ico}\n"
        f"–í –∫–æ–ª–æ–¥–µ: {len(game.deck.cards)}\n\n"
        f"–ò–≥—Ä–æ–∫–∏: {pleyers_info}\n"
        f"–ü–æ–ª–µ: \n{field_info if field else '  —Ç—É—Ç –ø—É—Å—Ç–æ~'}\n"
    )